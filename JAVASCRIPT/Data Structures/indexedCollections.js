//_________________________________________________________________Introduction_____________________________________________________________
/*
JavaScript-এ Indexed Collections বলতে এমন ডেটা স্ট্রাকচারগুলোকে বোঝানো হয় যেগুলো ইন্ডেক্স বা অবস্থান অনুযায়ী উপাদানগুলোকে সংরক্ষণ করে। 
Array এবং TypedArray হল JavaScript-এ দুটি প্রধান Indexed Collections। এই কালেকশনগুলো নির্দিষ্ট অবস্থানে (ইন্ডেক্সে) ডেটা সংরক্ষণ এবং অ্যাক্সেস করার সুবিধা দেয়
*/





//_______________________________________________________________Array____________________________________________________________________
/*
Array হলো JavaScript-এ একটি বহুল ব্যবহৃত ডেটা স্ট্রাকচার, যা একাধিক উপাদানকে একটি তালিকা আকারে সংরক্ষণ করতে সক্ষম। Array-এ বিভিন্ন ধরনের মান যেমন সংখ্যা, স্ট্রিং, অবজেক্ট ইত্যাদি রাখা যায়।

Array এর বৈশিষ্ট্য
1. Array-এর ইন্ডেক্স শূন্য থেকে শুরু হয়।
2. এটি পরিবর্তনযোগ্য (mutable), অর্থাৎ, আমরা Array-এর মান পরিবর্তন, যুক্ত, অথবা মুছে ফেলতে পারি।
3. বিভিন্ন ডেটা টাইপ একসাথে সংরক্ষণ করতে পারে।
*/


//______________________________Making Array
/*
// Array লিটারেল
const fruits = ['apple', 'banana', 'orange'];

// Array কনস্ট্রাক্টর
const numbers = new Array(1, 2, 3, 4);
*/


//____________________________Array Method
/*
.push() – নতুন মান যুক্ত করে।
.pop() – শেষের মান সরিয়ে ফেলে।
.shift() – প্রথম মান সরিয়ে ফেলে।
.unshift() – শুরুতে নতুন মান যুক্ত করে।
.map() – প্রতিটি উপাদানের উপর নির্দিষ্ট ফাংশন প্রয়োগ করে।
.filter() – নির্দিষ্ট শর্তের উপর ভিত্তি করে উপাদানগুলো ফিল্টার করে।
.reduce() – সব উপাদানগুলোকে একত্রিত করে একটি মান তৈরি করে।
*/
/*
const fruits = ['apple', 'banana', 'mango'];
fruits.push('orange'); // Output: ['apple', 'banana', 'mango', 'orange']
fruits.pop(); // Output: ['apple', 'banana', 'mango']
*/










//_____________________________________________________________Typed Array_____________________________________________________________

/*
TypedArray একটি বিশেষ ধরনের Array যা শুধুমাত্র একই ধরনের ডেটা সংরক্ষণ করতে পারে। এটি মূলত বাইনারি ডেটা পরিচালনা করতে ব্যবহৃত হয়, যেমন ইমেজ প্রসেসিং বা ডেটা স্ট্রিম। 
TypedArray ব্যবহার করে আপনি একটি ফিক্সড-লেংথ বাইনারি ডেটা সংরক্ষণ করতে পারেন যা অনেক দ্রুত কাজ করে।
*/



//________________________Type of Typed Array
/*
1. Int8Array – ৮-বিট সাইনড ইন্টিজার (signed integer)।
2. Uint8Array – ৮-বিট আনসাইনড ইন্টিজার (unsigned integer)।
3. Int16Array – ১৬-বিট সাইনড ইন্টিজার।
4. Uint16Array – ১৬-বিট আনসাইনড ইন্টিজার।
5. Float32Array – ৩২-বিট ফ্লোটিং পয়েন্ট।
6. Float64Array – ৬৪-বিট ফ্লোটিং পয়েন্ট।
*/




//______________________Making Typed Array
/*
// 8-বিট Unsigned ইন্টিজার Array
const byteArray = new Uint8Array([10, 20, 30, 40]);
console.log(byteArray[2]); // Output: 30

// 32-বিট ফ্লোটিং পয়েন্ট Array
const floatArray = new Float32Array([1.5, 2.5, 3.5]);
console.log(floatArray[1]); // Output: 2.5
*/





//_____________________Use Case of Typed Array
/*
1. উচ্চ-পারফরম্যান্সের প্রয়োজনীয় কাজে, যেমন ইমেজ প্রসেসিং।
2. ওয়েব অ্যাপ্লিকেশনগুলোতে বাইনারি ডেটা ম্যানিপুলেশনের ক্ষেত্রে।
3. বিভিন্ন ধরনের মিডিয়া ফাইল প্রসেসিংয়ে।
*/







//_____________________________________________________________Array vs TypedArray_______________________________________________________


বৈশিষ্ট্য	                                                          Array	                                       TypedArray
ডেটা টাইপ	                                              বিভিন্ন ধরনের ডেটা রাখতে পারে	                        এক ধরনের ডেটা রাখতে পারে
আকার পরিবর্তনযোগ্য	                                           পরিবর্তনযোগ্য (mutable)	                        নির্দিষ্ট আকার (fixed size)
ব্যবহারের ক্ষেত্র	                                                সাধারণ ডেটা সংরক্ষণ	                         বাইনারি ডেটা প্রসেসিং ও পারফরম্যান্স