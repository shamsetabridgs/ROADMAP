//_________________________________________________________________Introduction____________________________________________________________
/*
WeakSet হলো JavaScript-এর একটি বিশেষ ধরনের অবজেক্ট যা মূলত এমন অবজেক্টগুলোর একটি কালেকশন ধারণ করে যেগুলোকে "weakly held" অর্থাৎ, 
সহজে গার্বেজ কালেক্ট করা যায়। এটি সাধারণ Set-এর মতো কাজ করে, তবে কিছু গুরুত্বপূর্ণ পার্থক্য রয়েছে। 
*/







//______________________________________________________________Characteristics___________________________________________________________
/*
1. WeakSet কেবলমাত্র অবজেক্ট রাখতে পারে; অন্যান্য ধরনের (যেমন সংখ্যা বা স্ট্রিং) মান যোগ করা যাবে না।
2. এটি Set-এর মতো লিস্টের আকার সংরক্ষণ করে না, কারণ WeakSet এর মধ্যে উপস্থিত অবজেক্টগুলোর রেফারেন্স "weak" অর্থাৎ দুর্বল, যা গার্বেজ কালেকশনের মাধ্যমে স্বয়ংক্রিয়ভাবে মুছে ফেলা হতে পারে।
3. WeakSet ইটারেবল নয়, তাই এটি for...of লুপ বা .forEach() মেথড দিয়ে লুপ করে দেখা যায় না।
4. এর মধ্যে থাকা মানগুলো গার্বেজ কালেকশন প্রক্রিয়ায় স্বয়ংক্রিয়ভাবে মুছে যায় যদি অন্য কোনো স্থানে এগুলোর রেফারেন্স না থাকে।
*/






//_________________________________________________________Making Weak Set________________________________________________________

// WeakSet তৈরি করতে new WeakSet() কনস্ট্রাক্টর ব্যবহার করা হয়। শুরুতেই অবজেক্টগুলোর একটি লিস্ট WeakSet এ দেয়া যেতে পারে।
/*
const ws = new WeakSet();
const obj1 = { name: 'Alice' };
const obj2 = { name: 'Bob' };

// WeakSet-এ অবজেক্ট যোগ করা
ws.add(obj1);
ws.add(obj2);

console.log(ws); // Output: WeakSet { <items unknown> }
*/






//_________________________________________________________Adding value________________________________________________________________
/*
const people = new WeakSet();
const person = { name: 'Charlie' };

people.add(person);
*/







//__________________________________________________________Deleting value_______________________________________________________________
/*
const items = new WeakSet();
const item = { type: 'book' };

items.add(item);
console.log(items.delete(item)); // Output: true
*/







//_________________________________________________________Checking value______________________________________________________________
/*
const animals = new WeakSet();
const dog = { type: 'dog' };

animals.add(dog);
console.log(animals.has(dog)); // Output: true
*/






//__________________________________________________________Set vs Weakset_____________________________________________________________

/*
বৈশিষ্ট্য	                                                       WeakSet	                                                Set
ডেটা টাইপ	                                               কেবলমাত্র অবজেক্ট রাখতে পারে	                            যে কোন ডেটা টাইপ রাখতে পারে
আকার জানা	                                                .size প্রোপার্টি নেই	                                    .size প্রোপার্টি রয়েছে
ইটারেবল	                                                        ইটারেবল নয়	                                             ইটারেবল
গার্বেজ কালেকশন	                                        দুর্বলভাবে ধরে রাখে, তাই অবজেক্ট মুছে যেতে পারে	                      অবজেক্ট মুছে যায় না
*/








//_____________________________________________________________Use Case_________________________________________________________________

/*
WeakSet ব্যবহারের প্রধান ক্ষেত্র হলো মেমোরি ব্যবস্থাপনা। উদাহরণস্বরূপ, যখন আপনাকে কোন অবজেক্টের উপরে নজরদারি করতে হবে তবে সেই অবজেক্টগুলো গার্বেজ 
কালেকশন প্রক্রিয়ার সাথে সাথে স্বয়ংক্রিয়ভাবে মুছে যাওয়া উচিত, তখন WeakSet ব্যবহার করা হয়।
*/

const visited = new WeakSet();

function visitSite(user) {
    if (!visited.has(user)) {
        visited.add(user);
        console.log(`${user.name} has visited the site.`);
    } else {
        console.log(`${user.name} already visited.`);
    }
}

const user1 = { name: 'Alice' };
const user2 = { name: 'Bob' };

visitSite(user1); // Output: Alice has visited the site.
visitSite(user1); // Output: Alice already visited.